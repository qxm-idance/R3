# Taurus业务开发快速上手指南

## 一. 下载业务脚手架工程

在项目起始时需要从SVN上下载一个业务脚手架工程作为项目工程初始内容。

SVN下载地址为：

```
http://10.19.18.98:8080/svn/VERIS-CRM-TELENOR/trunk/R3/CRM/CRMCoreSaaS/TN_OMNI/veris-fe-scaffold
```

## 二. 工程目录说明

模版工程目录结构如下：

```text
biz  <业务模块工程目录>
  ├── .babelrc  <Babel配置文件>
  ├── .editorconfig  <WebStorm配置文件>
  ├── .eslintignore  <ESLint忽略列表配置文件>
  ├── .eslintrc.js  <ESLint配置文件>
  ├── .gitignore  <Git忽略列表配置文件>
  ├── build  <工程构建脚本目录>
  ├── config  <工程构建配置目录>
  ├── dist  <工程发布目录，里面放置工程编译后的内容>
  ├── package.json  <npm包配置文件>
  ├── README.md  <工程描述文件>
  └── src  <源码目录>
      ├── assets  <静态资源目录>
      │   ├── img  <图片目录>
      │   ├── css  <样式目录>
      │   └── fonts  <字体目录>
      ├── i18n  <国际化资源文件目录>
      │   ├── agent-view  <agent-view业务模块语言资源文件目录>
      │   ├── eshop  <eshop业务模块语言资源文件目录>
      │   ├── self-care  <self-care业务模块语言资源文件目录>
      │   ├── customer-mgmt  <客户管理业务模块语言资源文件目录>
      │   ├── resource-mgmt  <资源业务模块语言资源文件目录>
      │   └── <其他业务模块语言资源文件目录... ...>
      ├── agent-view  <agent-view业务模块源码目录>
      │   ├── assets  <静态资源目录>
      │   └── common  <业务组件目录>
      ├── eshop  <eshop业务模块源码目录>
      │   ├── assets  <静态资源目录>
      │   └── common  <业务组件目录>
      ├── self-care  <self-care业务模块源码目录>
      │   ├── assets  <静态资源目录>
      │   └── common  <业务组件目录>
      ├── customer-mgmt  <客户管理业务模块源码目录>
      │   ├── assets  <静态资源目录>
      │   └── common  <业务组件目录>
      ├── resource-mgmt  <资源管理业务模块源码目录>
      │   ├── assets  <静态资源目录>
      │   └── common  <业务组件目录>
      └── <其他业务模块目录... ...>
```

## 三. 工程环境搭建

### 安装 NodeJS

到[官网][nodejs]下载安装最新版本NodeJS。

> 注意：
> 1. 请安装LTS版本的NodeJS，Current版本是尝鲜版本，不稳定，所以不要装这个版本！
> 2. NodeJS版本必须是`v4.4.7`及以上版本！由于前端相关生态环境更新比较快，因此，NodeJS后续可能会升级。

### 安装编译所需的依赖包

在业务工程根目录中执行以下命令安装编译前端代码所需的依赖包：

```bash
npm install
```

> 注意：因为之后的编译动作都将依赖这些NPM包，所以请保证这个安装过程是正常完成的，否则编译很可能不能正常进行。

### 构建工程

工程构建分为开发和产品两种模式。

#### 开发模式构建

```bash
npm run dev
```

默认情况下，执行以上命令成功后，默认在`8082`端口将启动一个web server（你可以浏览到工程自带的页面，如：`http://localhost:8082/examples/busi-component-demo/index.html`），此时，工程源码是支持热加载的（即：当修改了源码后浏览器将立即自动刷新页面展现结果）！

#### 产品模式构建

```bash
npm run build
```

## 四. 开发工具选择

推荐使用下面的编辑器作为开发工具：

1. WebStorm

    安装以下插件：

      * ESLint

      * Vue.js

2. Atom

    安装以下插件：

      * linter-eslint

      * language-vue

3. VSCode

    安装以下插件：

      * ESLint (vue文件貌似失效)

      * Babel ES6/ES7

      * vue

4. Sublime Text

    安装以下插件：

      * ESLint

      * Vue Syntax Highlight

## 五. 开发模版

Taurus提供了几个开发时共用的文件模板，可以将其配置为文件模板，每次新建文件的时候选择对应的文件类型，这样可以提升开发效率。

新开发的页面推荐基于下面的模版来创建。

index.html文件模版

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="renderer" content="webkit">
    <meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"/>
    <!-- content请填写业务模块编码，此编码与i18n目录下对应模块的子目录名称保持一致,这里以eshop为例子 -->
    <meta name="biz-code" content="eshop">
    <title></title>
    <link rel="icon" href="/assets/img/favicon.ico" type="image/x-icon">
    <link href="/assets/css/main.css" rel="stylesheet">
    <!-- 此处定义业务样式 -->
</head>
<body>
  <!-- 此处放置HTML内容 -->
</body>
<!-- 此处放置需要引入的业务侧js文件 -->
</html>
```

> 注意：`name`为`biz-code`（名称不能更改）的`meta`标记是必须定义的，否则，此页面的国际化内容将失效！

业务模块编码如下：

|业务模块|编码|
|-------|---|
|eshop|eshop|
|self care|self-care|
|agent view|agent-view|
|customer managment|customer-mgmt|
|resource managment|resource-mgmt|

> 注意：如果需要扩展业务编码请联系Taurus团队。

index.js文件模版

```js
import {...} from 'aii-taurus';
new Vue({
  el: 'body', // 推荐定义为body，极少数情况可以定义为某个容器元素的选择器，如：'#myTag'等
  ready: function () { // 初始化
  },
  components: { // 注册需要使用的组件
  },
  data: function() {
    return {}; // 自定义数据结构
  },
  events: { // 事件处理定义
  },
  methods: { // 方法定义
  }
});
```

以上模版中的`...`为某些可用的模块名，如：

```js
import {taurus, TBars, TButton} from 'aii-taurus';
```

业务组件模版

```html
<style scoped>
</style>

<template>
</template>

<script>
export default {
  data: function () {  // store data
      return {};
  },
  props: { // props data

  },
  methods: { // methods

  },
  ready: function () { // init entry
  }
};
</script>
```

## 六. 页面开发

1. 在`src`目录对应业务模块目录内创建一个子目录，如：`src/eshop/family`；

    > 注意：业务模块目录名称为各业务模块编码，此编码是预先定义好的！

2. 在`src/eshop/family`内创建`index.js`和`index.html`两个文件；

    在`index.js`里必须首先引入Taurus相关的模块。如：

    ```js
    import {taurus, TSwitcher, TDoughnut} from 'aii-taurus';
    ```

    > 注意：`index.js`和`index.html`两个文件是此页面入口，编译脚本依赖了这两个名称，所以不能将这两个文件改名！

3. 在命令行控制台进入工程根目录，输入以下命令启动开发环境：

    ```bash
    npm run dev
    ```

    打开浏览器访问此页面对应的地址。开发过程中，只要代码变更(进行保存操作)，浏览器对应页面里的内容将自动刷新。

4. 页面开发完成后，输入下面的命令进行发布：

    ```bash
    npm run build
    ```

    构建完成后，发布内容将全部生成在`dist`目录内。

## 七. 国际化

Taurus使用[vue-i18n][vue-i18n]进行国际化处理。

### 语言资源文件和目录

在工程`src`目录下有一个`i18n`目录(此`i18n`目录在编译发布后将复制到发布目录下)，此目录内放置国际化语言资源文件。

在`i18n`目录中，各模块的语言文件将被放置在以各模块编码为名称的子目录内。如：

```text
i18n
├── eshop
│   ├── cn.json
│   └── en.json
└── self-care
    ├── cn.json
    └── en.json
    ... ...
```

所有语言资源文件都为json格式，并以[ISO 3166-2][iso_3166-2]两位小写国家代码作为文件名，如：`cn.json`、`en.json`等。以下是两个资源文件的例子：

**cn.json**

```json
{
  "shoppingcart": "购物车",
  "insuranse": "保险",
  "instalment": "分期付款",
  "stock": "股票",
  "demo": {
    "hello": "你好",
    "world": "世界",
    "hi": "@:demo.hello @:demo.world !!"
  }
}
```

**en.json**

```json
{
  "shoppingcart": "Shoppingcart",
  "insuranse": "Insuranse",
  "instalment": "Instalment",
  "stock": "Stock",
  "demo": {
    "hello": "Hello",
    "world": "World",
    "hi": "@:demo.hello @:demo.world !!"
  }
}
```

### 资源加载方式

在语言资源文件配置好后，可以以两种方式使用国际化资源。

假设当前语言为英语：

*方式一：*在HTML模版代码里可以使用`$t`函数来加载国际化资源。

  ```html
  <!-- 输出 <div>Shoppingcart</div> -->
  <div>{{ $t("shoppingcart") }}</div>

  <!-- 输出 <div>Hello</div> -->
  <div>{{ $t("demo.hello") }}</div>

  <!-- 输出 <div>Hello World !!</div> -->
  <div>{{ $t("demo.hi") }}</div>
  ```

*方式二：*在组件实例里可以使用`this.$t`函数加载国际化资源，非组件实例内可以使用`Vue.t`静态函数加载国际化资源。

  ```js
  var shoppingcart = this.$t('shoppingcart');
  var hi = this.$t('demo.hi');
  ```

  ```js
  var shoppingcart = Vue.$t('shoppingcart');
  var hi = Vue.t('demo.hi');
  ```

### 语言切换

如果需要动态切换当前语言，首先需要引入`taurus`模块：

```js
import {taurus} from 'aii-taurus';

//获取当前语言
console.log(taurus.lang);

//切换当前语言
taurus.lang = 'cn';

//加载语言资源
taurus.loadLang('eshop','cn');
```

## 附录

### 相关学习网站

[NodeJS官网][nodejs]

[webpack官网][webpack]

[vue中文官网][vue]

[vue官方脚手架工具][vue-cli]

[vue 1.x github仓库][vue-github]

[vuex github仓库][vuex-github]

[vue-router github仓库][vue-router-github]

[vue-resource github仓库][vue-resource-github]

[vue-i18n 官方文档][vue-i18n-doc]

[vuex 官方中文文档][vuex]

[vue-router 官方中文文档][vue-router]

[vue 资源列表][awesome-vue]

[nodejs]: https://nodejs.org/en/
[webpack]: http://webpack.github.io/
[vue]: http://vuejs.org.cn/
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-github]: https://github.com/vuejs/vue/
[vuex-github]: https://github.com/vuejs/vuex
[vue-router-github]: https://github.com/vuejs/vue-router
[vue-resource-github]: https://github.com/vuejs/vue-resource
[vuex]: http://vuex.vuejs.org/zh-cn/index.html
[vue-router]: http://router.vuejs.org/zh-cn/index.html
[awesome-vue]: https://github.com/vuejs/awesome-vue
[iso_3166-2]: https://en.wikipedia.org/wiki/ISO_3166-2
[vue-i18n-doc]: https://kazupon.github.io/vue-i18n/
[vue-i18n]: https://github.com/kazupon/vue-i18n

[amcharts-demo]: http://10.19.18.95:48888/examples/amcharts-demo/index.html
[autocomplete-demo]: http://10.19.18.95:48888/examples/autocomplete-demo/index.html
[box-group-demo]: http://10.19.18.95:48888/examples/box-group-demo/index.html
[breadcrumbs-demo]: http://10.19.18.95:48888/examples/breadcrumbs-demo/index.html
[button-demo]: http://10.19.18.95:48888/examples/button-demo/index.html
[collapse-demo]: http://10.19.18.95:48888/examples/collapse-demo/index.html
[cookie-helper-demo]: http://10.19.18.95:48888/examples/cookie-helper-demo/index.html
[data-table-demo]: http://10.19.18.95:48888/examples/data-table-demo/index.html
[date-picker-demo]: http://10.19.18.95:48888/examples/date-picker-demo/index.html
[dropdown-demo]: http://10.19.18.95:48888/examples/dropdown-demo/index.html
[form-validation-demo]: http://10.19.18.95:48888/examples/form-validation-demo/index.html
[loading-demo]: http://10.19.18.95:48888/examples/loading-demo/index.html
[modal-box-demo]: http://10.19.18.95:48888/examples/modal-box-demo/index.html
[modal-demo]: http://10.19.18.95:48888/examples/modal-demo/index.html
[number-stepper-demo]: http://10.19.18.95:48888/examples/number-stepper-demo/index.html
[pager-demo]: http://10.19.18.95:48888/examples/pager-demo/index.html
[range-slider-demo]: http://10.19.18.95:48888/examples/range-slider-demo/index.html
[restful-service-demo]: http://10.19.18.95:48888/examples/restful-service-demo/index.html
[scroll-to-demo]: http://10.19.18.95:48888/examples/scroll-to-demo/index.html
[search-filter-demo]: http://10.19.18.95:48888/examples/search-filter-demo/index.html
[select-demo]: http://10.19.18.95:48888/examples/select-demo/index.html
[simple-table-demo]: http://10.19.18.95:48888/examples/simple-table-demo/index.html
[speech-bubble-demo]: http://10.19.18.95:48888/examples/speech-bubble-demo/index.html
[status-message-demo]: http://10.19.18.95:48888/examples/status-message/index.html
[switcher-demo]: http://10.19.18.95:48888/examples/switcher-demo/index.html
[tabs-demo]: http://10.19.18.95:48888/examples/tabs-demo/index.html
[tooltips-demo]: http://10.19.18.95:48888/examples/tooltips-demo/index.html
[video-player-demo]: http://10.19.18.95:48888/examples/video-player-demo/index.html
